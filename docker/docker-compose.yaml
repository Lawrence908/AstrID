version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: astrid-postgres-dev
    environment:
      POSTGRES_DB: astrid
      POSTGRES_USER: astrid_user
      POSTGRES_PASSWORD: astrid_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - astrid-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U astrid_user -d astrid"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis for message queues and caching
  redis:
    image: redis:7-alpine
    container_name: astrid-redis-dev
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    expose:
      - "6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-foo}
    entrypoint: >
      sh -c '
        redis-server --requirepass "$$REDIS_PASSWORD" && redis-cli -a "$$REDIS_PASSWORD" config set requirepass "$$REDIS_PASSWORD"
      '
    volumes:
      - redis_data:/data
    networks:
      - astrid-network
    healthcheck:
      test: sh -c 'redis-cli -a "$$REDIS_PASSWORD" ping'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  # MLflow tracking server
  mlflow:
    image: python:3.11-slim
    container_name: astrid-mlflow-dev
    working_dir: /app
    env_file:
      - ../.env
    environment:
      # MLflow uses psycopg (sync driver) while main app uses asyncpg (async driver)
      - MLFLOW_TRACKING_URI=postgresql+psycopg://astrid_user:astrid_password@postgres:5432/astrid
      - MLFLOW_ARTIFACT_ROOT=s3://astrid-models
      - MLFLOW_S3_ENDPOINT_URL=${CLOUDFLARE_R2_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${CLOUDFLARE_R2_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${CLOUDFLARE_R2_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=auto
    ports:
      - "5000:5000"
    volumes:
      - ../../:/app
    networks:
      - astrid-network
    command: >
      bash -c "pip install mlflow psycopg2-binary boto3 &&
               mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri postgresql+psycopg://astrid_user:astrid_password@postgres:5432/astrid"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prefect server
  prefect:
    image: prefecthq/prefect:2-latest
    container_name: astrid-prefect-dev
    ports:
      - "4200:4200"
    env_file:
      - ../.env
    environment:
      - PREFECT_API_URL=http://localhost:4200/api
    networks:
      - astrid-network
    command: prefect server start --host 0.0.0.0 --port 4200
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # AstrID API
  api:
    build:
      context: ..
      dockerfile: docker/api.Dockerfile
    container_name: astrid-api-dev
    ports:
      - "8000:8000"
    env_file:
      - ../.env
    environment:
      # Supabase components (used by get_database_url() in constants.py)
      - SUPABASE_HOST=postgres:5432
      - SUPABASE_PASSWORD=astrid_password
      - SUPABASE_PROJECT_REF=astrid
      - REDIS_URL=redis://:${REDIS_PASSWORD:-foo}@redis:6379/0
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AWS_ACCESS_KEY_ID=${CLOUDFLARE_R2_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${CLOUDFLARE_R2_SECRET_ACCESS_KEY}
      - AWS_S3_ENDPOINT_URL=${CLOUDFLARE_R2_ENDPOINT_URL}
      - PYTHONPATH=/app/src
      - DEBUG=true
    volumes:
      - ../../:/app
      - ../../src:/app/src
      - ../../logs:/app/logs
    networks:
      - astrid-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    command: python -m uvicorn src.adapters.api.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/src
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # AstrID Worker
  worker:
    build:
      context: ..
      dockerfile: docker/worker.Dockerfile
    container_name: astrid-worker-dev
    env_file:
      - ../.env
    environment:
      # Supabase components (used by get_database_url() in constants.py)
      - SUPABASE_HOST=postgres:5432
      - SUPABASE_PASSWORD=astrid_password
      - SUPABASE_PROJECT_REF=astrid
      - REDIS_URL=redis://:${REDIS_PASSWORD:-foo}@redis:6379/0
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AWS_ACCESS_KEY_ID=${CLOUDFLARE_R2_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${CLOUDFLARE_R2_SECRET_ACCESS_KEY}
      - AWS_S3_ENDPOINT_URL=${CLOUDFLARE_R2_ENDPOINT_URL}
      - PYTHONPATH=/app/src
      - DEBUG=true
    volumes:
      - ../../:/app
      - ../../src:/app/src
      - ../../logs:/app/logs
    networks:
      - astrid-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    command: dramatiq -w 4 -p 1 src.adapters.workers.tasks

volumes:
  postgres_data:
  redis_data:

networks:
  astrid-network:
    name: astrid-dev
    driver: bridge
