"""added energy tracking fields

Revision ID: 49667e49d15c
Revises: ba3eba0bb123
Create Date: 2025-09-12 08:51:47.519523+00:00

"""

from collections.abc import Sequence

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "49667e49d15c"
down_revision: str | None = "ba3eba0bb123"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop MLflow tables in dependency-safe order
    op.drop_table("tags")
    op.drop_table("metrics")
    op.drop_table("params")
    op.drop_table("runs")  # depends on experiments
    op.drop_table("experiments")
    with op.batch_alter_table("model_runs", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "energy_consumed_wh", sa.Numeric(precision=8, scale=4), nullable=True
            )
        )
        batch_op.add_column(
            sa.Column(
                "avg_power_draw_w", sa.Numeric(precision=6, scale=2), nullable=True
            )
        )
        batch_op.add_column(
            sa.Column(
                "peak_power_draw_w", sa.Numeric(precision=6, scale=2), nullable=True
            )
        )
        batch_op.add_column(
            sa.Column(
                "carbon_footprint_g", sa.Numeric(precision=8, scale=4), nullable=True
            )
        )

    with op.batch_alter_table("models", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "training_energy_wh", sa.Numeric(precision=10, scale=4), nullable=True
            )
        )
        batch_op.add_column(
            sa.Column(
                "training_avg_power_w", sa.Numeric(precision=8, scale=2), nullable=True
            )
        )
        batch_op.add_column(
            sa.Column(
                "training_peak_power_w", sa.Numeric(precision=8, scale=2), nullable=True
            )
        )
        batch_op.add_column(
            sa.Column("training_duration_seconds", sa.Integer(), nullable=True)
        )
        batch_op.add_column(
            sa.Column(
                "training_carbon_footprint_kg",
                sa.Numeric(precision=10, scale=6),
                nullable=True,
            )
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("models", schema=None) as batch_op:
        batch_op.drop_column("training_carbon_footprint_kg")
        batch_op.drop_column("training_duration_seconds")
        batch_op.drop_column("training_peak_power_w")
        batch_op.drop_column("training_avg_power_w")
        batch_op.drop_column("training_energy_wh")

    with op.batch_alter_table("model_runs", schema=None) as batch_op:
        batch_op.drop_column("carbon_footprint_g")
        batch_op.drop_column("peak_power_draw_w")
        batch_op.drop_column("avg_power_draw_w")
        batch_op.drop_column("energy_consumed_wh")

    op.create_table(
        "runs",
        sa.Column(
            "run_uuid", sa.VARCHAR(length=32), autoincrement=False, nullable=False
        ),
        sa.Column("name", sa.VARCHAR(length=250), autoincrement=False, nullable=True),
        sa.Column(
            "source_type", sa.VARCHAR(length=20), autoincrement=False, nullable=True
        ),
        sa.Column(
            "source_name", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
        sa.Column(
            "entry_point_name",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "user_id", sa.VARCHAR(length=256), autoincrement=False, nullable=True
        ),
        sa.Column("status", sa.VARCHAR(length=20), autoincrement=False, nullable=True),
        sa.Column("start_time", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("end_time", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column(
            "source_version", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column(
            "lifecycle_stage", sa.VARCHAR(length=20), autoincrement=False, nullable=True
        ),
        sa.Column(
            "artifact_uri", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
        sa.Column("experiment_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.CheckConstraint(
            "lifecycle_stage::text = ANY (ARRAY['active'::character varying, 'deleted'::character varying]::text[])",
            name="runs_lifecycle_stage",
        ),
        sa.CheckConstraint(
            "source_type::text = ANY (ARRAY['NOTEBOOK'::character varying, 'JOB'::character varying, 'LOCAL'::character varying, 'UNKNOWN'::character varying, 'PROJECT'::character varying]::text[])",
            name="source_type",
        ),
        sa.CheckConstraint(
            "status::text = ANY (ARRAY['SCHEDULED'::character varying, 'FAILED'::character varying, 'FINISHED'::character varying, 'RUNNING'::character varying]::text[])",
            name="status",
        ),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["experiments.experiment_id"],
            name="runs_experiment_id_fkey",
        ),
        sa.PrimaryKeyConstraint("run_uuid", name="run_pk"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "experiments",
        sa.Column(
            "experiment_id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('experiments_experiment_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=256), autoincrement=False, nullable=False),
        sa.Column(
            "artifact_location",
            sa.VARCHAR(length=256),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "lifecycle_stage", sa.VARCHAR(length=32), autoincrement=False, nullable=True
        ),
        sa.CheckConstraint(
            "lifecycle_stage::text = ANY (ARRAY['active'::character varying, 'deleted'::character varying]::text[])",
            name="experiments_lifecycle_stage",
        ),
        sa.PrimaryKeyConstraint("experiment_id", name="experiment_pk"),
        sa.UniqueConstraint("name", name="experiments_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "params",
        sa.Column("key", sa.VARCHAR(length=250), autoincrement=False, nullable=False),
        sa.Column("value", sa.VARCHAR(length=250), autoincrement=False, nullable=False),
        sa.Column(
            "run_uuid", sa.VARCHAR(length=32), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["run_uuid"], ["runs.run_uuid"], name="params_run_uuid_fkey"
        ),
        sa.PrimaryKeyConstraint("key", "run_uuid", name="param_pk"),
    )
    op.create_table(
        "metrics",
        sa.Column("key", sa.VARCHAR(length=250), autoincrement=False, nullable=False),
        sa.Column(
            "value",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("timestamp", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "run_uuid", sa.VARCHAR(length=32), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["run_uuid"], ["runs.run_uuid"], name="metrics_run_uuid_fkey"
        ),
        sa.PrimaryKeyConstraint("key", "timestamp", "run_uuid", name="metric_pk"),
    )
    op.create_table(
        "tags",
        sa.Column("key", sa.VARCHAR(length=250), autoincrement=False, nullable=False),
        sa.Column("value", sa.VARCHAR(length=250), autoincrement=False, nullable=True),
        sa.Column(
            "run_uuid", sa.VARCHAR(length=32), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["run_uuid"], ["runs.run_uuid"], name="tags_run_uuid_fkey"
        ),
        sa.PrimaryKeyConstraint("key", "run_uuid", name="tag_pk"),
    )
    # ### end Alembic commands ###
