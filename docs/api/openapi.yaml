openapi: 3.1.0
info:
  title: AstrID API
  version: 1.0.0
  description: |
    # AstrID API Documentation
    
    The AstrID (Astronomical Identification) API provides comprehensive endpoints for:
    
    - **Observation Management**: Ingest, process, and manage astronomical observations
    - **Image Processing**: Calibration, alignment, and preprocessing of astronomical images
    - **Anomaly Detection**: Machine learning-powered detection of astronomical anomalies
    - **Workflow Orchestration**: Automated processing pipelines and workflows
    - **Data Cataloging**: Search, filter, and export astronomical data
    - **Human Validation**: Curator interfaces for anomaly validation
    
    ## Authentication
    
    The API uses JWT-based authentication with role-based access control (RBAC). Include the JWT token in the Authorization header:
    
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Rate Limiting
    
    API requests are rate-limited per user and endpoint. Rate limit information is included in response headers:
    
    - `X-RateLimit-Limit`: Maximum requests per window
    - `X-RateLimit-Remaining`: Remaining requests in current window
    - `X-RateLimit-Reset`: Window reset timestamp
    
    ## Error Handling
    
    All errors follow a consistent format:
    
    ```json
    {
      "success": false,
      "error": {
        "message": "Human-readable error message",
        "error_code": "ERROR_CODE",
        "details": "Additional error details",
        "type": "ExceptionType"
      },
      "timestamp": "2025-01-01T00:00:00Z"
    }
    ```
    
    ## Versioning
    
    The API supports multiple versioning strategies:
    
    - **URL-based**: `/api/v1/observations`
    - **Header-based**: `Accept: application/vnd.astrid.v1+json`
    - **Query parameter**: `?version=1`
    
  contact:
    name: AstrID Team
    email: astronomical.identification@gmail.com
    url: https://github.com/Lawrence908/AstrID
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://astrid.chrislawrence.ca/terms

servers:
  - url: http://127.0.0.1:8000
    description: Development server
  - url: https://api.astrid.chrislawrence.ca
    description: Production server



tags:
  - name: observations
    description: Astronomical observation management
  - name: detections
    description: Anomaly detection and ML inference
  - name: preprocessing
    description: Image preprocessing and calibration
  - name: differencing
    description: Image differencing algorithms
  - name: curation
    description: Human validation and curation
  - name: catalog
    description: Data cataloging and search
  - name: workflows
    description: Workflow orchestration and automation
  - name: health
    description: System health and monitoring
  - name: auth
    description: Authentication and authorization
  - name: storage
    description: Cloud storage management
  - name: mlflow
    description: MLflow experiment tracking
  - name: workers
    description: Background worker management
  - name: stream
    description: Real-time streaming endpoints

paths:
  /:
    get:
      summary: API Information
      description: Get basic API information and available endpoints
      tags: [health]
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "AstrID API"
                  version:
                    type: string
                    example: "1.0.0"
                  docs:
                    type: string
                    example: "/docs"
                  redoc:
                    type: string
                    example: "/redoc"
                  frontend:
                    type: string
                    example: "http://localhost:3000"

  /health:
    get:
      summary: Health Check
      description: Comprehensive system health check
      tags: [health]
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: System is degraded or unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"
        version:
          type: string
          example: "1.0.0"
        environment:
          type: string
          example: "production"
        services:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/ServiceStatus'
            redis:
              $ref: '#/components/schemas/ServiceStatus'
            mlflow:
              $ref: '#/components/schemas/ServiceStatus'
            prefect:
              $ref: '#/components/schemas/ServiceStatus'
        response_time_ms:
          type: number
          example: 45.67

    ServiceStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, not_configured]
          example: "healthy"
        connection:
          type: string
          example: "connected"
        pool_stats:
          type: object
          properties:
            size:
              type: integer
              example: 5
            checked_in:
              type: integer
              example: 3
            checked_out:
              type: integer
              example: 2
            overflow:
              type: integer
              example: 0
        error:
          type: string
          example: "Connection timeout"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            message:
              type: string
              example: "Resource not found"
            error_code:
              type: string
              example: "RESOURCE_NOT_FOUND"
            details:
              type: string
              example: "Observation with ID 123 not found"
            type:
              type: string
              example: "ResourceNotFoundError"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"

    PaginationParams:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number (1-based)
        size:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Number of items per page
        sort:
          type: string
          description: Sort field and direction (e.g., "created_at:desc")
        search:
          type: string
          description: Search query

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items: {}
        pagination:
          type: object
          properties:
            page:
              type: integer
              example: 1
            size:
              type: integer
              example: 20
            total:
              type: integer
              example: 100
            pages:
              type: integer
              example: 5
            has_next:
              type: boolean
              example: true
            has_prev:
              type: boolean
              example: false

    Observation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        survey:
          type: string
          example: "ZTF"
        observation_id:
          type: string
          example: "ZTF_20230101_000000"
        ra:
          type: number
          format: float
          minimum: 0
          maximum: 360
          example: 180.5
        dec:
          type: number
          format: float
          minimum: -90
          maximum: 90
          example: 45.2
        observation_time:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"
        filter_band:
          type: string
          example: "r"
        exposure_time:
          type: number
          format: float
          example: 30.0
        status:
          type: string
          enum: [ingested, preprocessing, differencing, detection, validation, completed, failed]
          example: "completed"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"

    Detection:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        observation_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        ra:
          type: number
          format: float
          example: 180.5
        dec:
          type: number
          format: float
          example: 45.2
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
          example: 0.95
        magnitude:
          type: number
          format: float
          example: 18.5
        status:
          type: string
          enum: [detected, validated, rejected, pending]
          example: "detected"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"

security:
  - BearerAuth: []
